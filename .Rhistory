# Key to OpenExhcange Rates
key <- read_file(file = ".credentials/openexchangerates") %>%
str_replace("\n", "")
d_clean %>% select(fare_amount, fare_currency) %>% mutate(usd_spent = lucr::currency_convert(fare_amount, from = fare_currency, to = "USD", key = key))
source("utils/setup.R")
d_clean %>% select(fare_amount, fare_currency)
d_clean %>% select(fare_amount, fare_currency) %>% pull(fare_currency)
d_clean %>% select(fare_amount, fare_currency) %>% pull(fare_currency) %>% unique()
d_clean %>% filter(is.na(fare_currency))
?currency_convert
currency_convert(1, from = "INR", to = "USD", key = key)
lucr::currency_convert(1, from = "INR", to = "USD", key = key)
d_clean %>% select(fare_currency)
d_clean %>% select(fare_currency) %>% distinct()
d_clean %>% select(fare_currency) %>% distinct() %>% remove_empty_rows()
d_clean %>% select(fare_currency) %>% distinct() %>% remove_empty("rows")
d_clean %>%
select(fare_currency) %>%
distinct() %>% remove_empty("rows") %>%
mutate(rate = map(fare_currency, function(x) lucr::currency_convert(1, from = x, to = "USD", key = key)))
.Last.value %>% View()
d_clean
d_clean %>% select(fare_currency)
d_clean %>% select(fare_currency) %>% distinct()
d_clean %>% select(fare_currency) %>% distinct() %>% remove_empty_rows()
d_clean %>%
select(fare_currency) %>%
distinct() %>%
remove_empty("rows") %>%
mutate(
rate = map_dbl(fare_currency, function(x) lucr::currency_convert(1, from = x, to = "USD", key = key))
)
.Last.value -> d_currency_rates
d_clean
d_clean %>% glimpse()
d_clean %>% left_join(d_currency_rates, by = "fare_currency")
d_clean %>% left_join(d_currency_rates, by = "fare_currency") %>% glimpse()
d_clean %>% left_join(d_currency_rates, by = "fare_currency") %>% mutate(usd_spent = fare_amount * rate) %>% select(usd_spent)
d_clean %>% left_join(d_currency_rates, by = "fare_currency") %>% mutate(usd_spent = fare_amount * rate) %>% select(usd_spent) %>% pull(usd_spent) %>% sum()
d_clean %>% left_join(d_currency_rates, by = "fare_currency") %>% mutate(usd_spent = fare_amount * rate) %>% select(usd_spent) %>% pull(usd_spent) %>% sum(na.rm = T)
d_clean %>% left_join(d_currency_rates, by = "fare_currency") %>% mutate(usd_spent = fare_amount * rate) %>% select(usd_spent) %>% pull(usd_spent) %>% sum()
d_clean %>% left_join(d_currency_rates, by = "fare_currency") %>% mutate(usd_spent = fare_amount * rate) %>% select(usd_spent) %>% pull(usd_spent) %>% sum(na.rm = T)
d_clean %>% left_join(d_currency_rates, by = "fare_currency") %>% mutate(usd_spent = fare_amount * rate) %>% select(usd_spent) %>% pull(usd_spent) %>% sum(na.rm = T) %>% sprintf("%s", .)
d_clean %>% left_join(d_currency_rates, by = "fare_currency") %>% mutate(usd_spent = fare_amount * rate) %>% select(usd_spent) %>% pull(usd_spent) %>% sum(na.rm = T) %>% sprintf("$ %s", .)
d_clean %>% left_join(d_currency_rates, by = "fare_currency") %>% mutate(usd_spent = fare_amount * rate) %>% select(usd_spent) %>% pull(usd_spent) %>% sum(na.rm = T) %>% round() %>%  sprintf("$ %s", .)
d_clean %>% left_join(d_currency_rates, by = "fare_currency") %>% mutate(usd_spent = fare_amount * rate) %>% select(usd_spent) %>% pull(usd_spent) %>% sum(na.rm = T) %>% round() %>%  sprintf("$%s", .)
d_clean
d_clean %>% arrange(year)
d_clean %>% select(year) %>% distinct()
runApp()
d_clean %>% left_join(d_currency_rates, by = "fare_currency") %>% mutate(usd_spent = fare_amount * rate) %>% select(usd_spent) %>% pull(usd_spent) %>% sum(na.rm = T) %>% round() %>%  sprintf("$%s", .)
runApp()
runApp()
runApp()
# Key to OpenExhcange Rates
key <- read_file(file = ".credentials/alphavantage") %>%
str_replace("\n", "")
key
library(alphavantager)
alphavantager::av_api_key(key)
d_clean %>%
select(fare_currency) %>%
distinct() %>%
remove_empty("rows")
d_rates <- d_clean %>%
select(fare_currency) %>%
distinct() %>%
remove_empty("rows")
d_rates
?av_get(av_fun = )
?av_get(av_fun = "CURRENCY_EXCHANGE_RATE", from_currency = "AUD", to_currency = "USD")
av_get(av_fun = "CURRENCY_EXCHANGE_RATE", from_currency = "AUD", to_currency = "USD")
av_get(av_fun = "CURRENCY_EXCHANGE_RATE", av_from_currency = "AUD", av_to_currency = "USD")
av_get
mutate
select
av_get
d_clean %>%
select(fare_currency) %>%
distinct() %>%
remove_empty("rows") %>%
mutate(
rate = map_dbl(fare_currency, function(x) lucr::currency_convert(1, from = x, to = "USD", key = key))
)
# Key to OpenExhcange Rates
key <- read_file(file = ".credentials/openexchangerates") %>%
str_replace("\n", "")
d_clean %>%
select(fare_currency) %>%
distinct() %>%
remove_empty("rows") %>%
mutate(
rate = map_dbl(fare_currency, function(x) lucr::currency_convert(1, from = x, to = "USD", key = key))
)
.Last.value -> d_currency_rates
d_currency_rates %>% mutate(rates_date = Sys.Date())
d_currency_rates %>% mutate(rates_date = Sys.Date())
fname_rate <- file.path("data", "vivek")
fname_rate <- file.path("data", "currency_rate", Sys.Date())
fname_rate <- file.path("data", "currency_rate", gsub(Sys.Date(), "-", ""))
fname_rate <- file.path("data", "currency_rate", str_replace_all(Sys.Date(), "-", ""))
fname_rate <- file.path("data", sprintf("currency_rate_%s", str_replace_all(Sys.Date(), "-", "")))
fname_rate <- file.path("data", sprintf("currency_rate_%s.csv", str_replace_all(Sys.Date(), "-", "")))
d_currency_rates %>% mutate(rates_date = Sys.Date())
d_currency_rates %>% mutate(rates_date = Sys.Date()) %>% write_csv(fname_rate)
d_currency_rates %>% mutate(rates_date = Sys.Date()) %>% write_csv("data/currency_rate.csv")
d_currency_rates <- read_csv("data/currency_rate.csv")
runApp()
d_clean
d_clean %>% slice(n()) %>% gather(var, n) %>% View()
d_clean %>% slice(n()) %>% pull(dropoff_date)
d_clean %>% arrange(dropoff_date) %>% slice(n()) %>% pull(dropoff_date)
d_clean %>%
arrange(dropoff_date) %>%
slice(n()) %>%
pull(dropoff_date)
# Find the currency rate
date_of_rate <- d_currency_rates %>%
pull(rate)
d_currency_rates
# Find the currency rate
date_of_rate <- d_currency_rates %>%
pull(rates_date) %>%
first()
# Find the date for which data was pulled
latest_date <- d_clean %>%
arrange(dropoff_date) %>%
slice(n()) %>%
pull(dropoff_date)
message <- sprintf(
"This data is based on the Uber extract on %s with the currency rate based on %s",
latest_date,
date_of_rate
)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::selectInput()
?shiny::selectInput()
?renderUI
d_terror <- read_csv("data/terrorist-incidents.csv")
d_terror
d_terror %>%
filter(Code = "IND")
d_terror %>%
filter(Code == "IND")
d_terror %>%
clean_names() %>%
filter(Code == "IND")
d_terror %>%
clean_names() %>%
filter(code == "IND")
d_terror %>%
clean_names() %>%
filter(code == "IND") %>%
ggplot(aes(x = year, y = number_of_terrorist_incidents_gdt_2018_incidents)) +
geom_line()
d_terror %>%
clean_names() %>%
filter(code == "IND") %>%
ggplot(aes(x = year, y = number_of_terrorist_incidents_gdt_2018_incidents)) +
geom_line() +
labs(
x = "Year",
y = "Number of Incidents"
)
d_terror %>%
clean_names() %>%
filter(code == "IND") %>%
ggplot(aes(x = year, y = number_of_terrorist_incidents_gdt_2018_incidents)) +
geom_line() +
geom_smooth(method = "loess") +
labs(
x = "Year",
y = "Number of Incidents"
)
d_terror %>%
clean_names() %>%
filter(code == "IND") %>%
ggplot(aes(x = year, y = number_of_terrorist_incidents_gdt_2018_incidents)) +
geom_line() +
geom_vline(xintercept = 2014, colour = "red") +
labs(
x = "Year",
y = "Number of Incidents"
)
d_fatalaties <- read_csv("data/fatalities-from-terrorism.csv") %>%
clean_names()
d_fatalaties
d_fatalaties %>%
filter(code == "IND")
d_terror %>%
clean_names() %>%
filter(code == "IND") %>%
ggplot(aes(x = year, y = number_of_terrorist_incidents_gdt_2018_incidents)) +
geom_line() +
geom_line(
data = d_fatalaties %>%
filter(code == "IND"),
aes(x = year, y = terrorism_fatalities_gtd_2018_deaths, color = "blue")
) +
geom_vline(xintercept = 2014, colour = "red") +
labs(
x = "Year",
y = "Number of Incidents"
)
d_terror %>%
clean_names() %>%
filter(code == "IND") %>%
ggplot(aes(x = year, y = number_of_terrorist_incidents_gdt_2018_incidents)) +
geom_line() +
geom_line(
data = d_fatalaties %>%
filter(code == "IND"),
aes(x = year, y = terrorism_fatalities_gtd_2018_deaths, color = "blue")
) +
geom_vline(xintercept = 2014, colour = "red") +
labs(
x = "Year",
y = ""
)
d_injuries <- read_csv("data/injuries-from-terrorism.csv") %>%
clean_names()
d_injuries <- read_csv("data/injuries-from-terrorism.csv") %>%
clean_names() %>%
mutate(type = "injuries")
d_fatalaties
d_fatalaties %>% gather(var, type, -entity, -code, -year)
d_fatalaties %>% gather(type, num, -entity, -code, -year)
d_terror <- read_csv("data/terrorist-incidents.csv") %>%
clean_names() %>%
gather(type, num, -entity, -code, -year)
d_fatalities <- read_csv("data/fatalities-from-terrorism.csv") %>%
clean_names() %>%
gather(type, num, -entity, -code, -year)
d_injuries <- read_csv("data/injuries-from-terrorism.csv") %>%
clean_names() %>%
gather(type, num, -entity, -code, -year)
d_terror
# Read data files ---------------------------------------------------------
terror_data_files <- c("data/terrorist-incidents.csv", "data/fatalities-from-terrorism.csv", "data/injuries-from-terrorism.csv")
d_terrorism_data <- map_df(terror_data_files, function(x){
read_csv(x) %>%
gather(type, num, -entity, -code, -year)
})
d_terrorism_data <- map_df(terror_data_files, function(x){
read_csv(x) %>%
gather(type, num, -Entity, -Code, -Year)
})
d_terrorism_data
d_terrorism_data %>%
filter(Code == "IND")
d_terrorism_data %>%
filter(Code == "IND") %>%
ggplot(aes(x = Year, y = num, col = type)) +
geom_line() +
geom_vline(xintercept = 2014, color = "red") +
geom_vline(xintercept = 2004, colour = "red")
d_terrorism_data %>%
filter(Code == "IND") %>%
ggplot(aes(x = Year, y = num, col = type)) +
geom_line() +
geom_vline(xintercept = 2014, color = "red") +
geom_vline(xintercept = 2004, colour = "red") +
theme(
legend.position = "bottom"
)
?geom_rect
?annotate
d_terrorism_data %>%
filter(Code == "IND") %>%
ggplot(aes(x = Year, y = num, col = type)) +
geom_line() +
geom_vline(xintercept = 2014, color = "red") +
geom_vline(xintercept = 2004, colour = "red") +
annotate("rect", y = 2004, yend = 2014, alpha = 0.2) +
theme(
legend.position = "bottom"
)
d_terrorism_data %>%
filter(Code == "IND") %>%
ggplot(aes(x = Year, y = num, col = type)) +
geom_line() +
geom_vline(xintercept = 2014, color = "red") +
geom_vline(xintercept = 2004, colour = "red") +
annotate("rect", ymin = 2004, ymax = 2014, alpha = 0.2) +
theme(
legend.position = "bottom"
)
d_terrorism_data %>%
filter(Code == "IND") %>%
ggplot(aes(x = Year, y = num, col = type)) +
geom_line() +
geom_vline(xintercept = 2014, color = "red") +
geom_vline(xintercept = 2004, colour = "red") +
annotate(
"rect",
xmin = 2004,
xmax = 2014,
ymin = 0,
ymax = Inf,
alpha = 0.2
) +
theme(
legend.position = "bottom"
)
d_terrorism_data %>%
filter(Code == "IND") %>%
ggplot(aes(x = Year, y = num, col = type)) +
geom_line() +
geom_vline(xintercept = 2014, color = "red") +
geom_vline(xintercept = 2004, colour = "red") +
annotate(
"rect",
xmin = 2004,
xmax = 2014,
ymin = 0,
ymax = Inf,
alpha = 0.2,
color = "red"
) +
theme(
legend.position = "bottom"
)
d_terrorism_data %>%
filter(Code == "IND") %>%
ggplot(aes(x = Year, y = num, col = type)) +
geom_line() +
geom_vline(xintercept = 2014, color = "red") +
geom_vline(xintercept = 2004, colour = "red") +
annotate(
"rect",
xmin = 2004,
xmax = 2014,
ymin = 0,
ymax = Inf,
alpha = 0.2,
fill = "red"
) +
theme(
legend.position = "bottom"
)
d_terrorism_data %>%
filter(Code == "IND") %>%
ggplot(aes(x = Year, y = num, col = type)) +
geom_line() +
geom_vline(xintercept = 2014, color = "red") +
geom_vline(xintercept = 2004, colour = "red") +
annotate(
"rect",
xmin = 2004,
xmax = 2014,
ymin = -Inf,
ymax = Inf,
alpha = 0.2,
fill = "red"
) +
theme(
legend.position = "bottom"
)
d_terrorism_data %>%
filter(Code == "IND") %>%
ggplot(aes(x = Year, y = num, col = type)) +
geom_line() +
geom_vline(xintercept = 2014, color = "red") +
geom_vline(xintercept = 2004, colour = "red") +
annotate(
"rect",
xmin = 2004,
xmax = 2014,
ymin = -Inf,
ymax = Inf,
alpha = 0.2,
fill = "blue"
) +
theme(
legend.position = "bottom"
)
d_terrorism_data %>%
filter(Code == "IND") %>%
ggplot(aes(x = Year, y = num, col = type)) +
geom_line() +
geom_vline(xintercept = 2014, color = "red") +
geom_vline(xintercept = 2004, colour = "red") +
annotate(
"rect",
xmin = 2004,
xmax = 2014,
ymin = -Inf,
ymax = Inf,
alpha = 0.2,
fill = "blue"
) +
theme(
legend.position = "bottom"
) +
theme_classic()
d_terrorism_data %>%
filter(Code == "IND") %>%
ggplot(aes(x = Year, y = num, col = type)) +
geom_line() +
geom_vline(xintercept = 2014, color = "red") +
geom_vline(xintercept = 2004, colour = "red") +
annotate(
"rect",
xmin = 2004,
xmax = 2014,
ymin = -Inf,
ymax = Inf,
alpha = 0.2,
fill = "blue"
) +
theme_classic()
d_terrorism_data %>%
filter(Code == "IND") %>%
ggplot(aes(x = Year, y = num, col = type)) +
geom_line() +
geom_vline(xintercept = 2014, color = "red") +
geom_vline(xintercept = 2004, colour = "red") +
annotate(
"rect",
xmin = 2004,
xmax = 2014,
ymin = -Inf,
ymax = Inf,
alpha = 0.2,
fill = "blue"
) +
theme_classic() +
theme(
legend.position = "bottom"
)
d_terrorism_data %>%
filter(Code == "IND") %>%
ggplot(aes(x = Year, y = num, col = type)) +
geom_line() +
geom_vline(xintercept = 2014, color = "red") +
geom_vline(xintercept = 2004, colour = "red") +
annotate(
"rect",
xmin = 2004,
xmax = 2014,
ymin = -Inf,
ymax = Inf,
alpha = 0.2,
fill = "blue"
) +
theme_classic() +
theme(
legend.position = "bottom"
) +
plotly::ggplotly()
d_terrorism_data %>%
filter(Code == "IND") %>%
ggplot(aes(x = Year, y = num, col = type)) +
geom_line() +
geom_vline(xintercept = 2014, color = "red") +
geom_vline(xintercept = 2004, colour = "red") +
annotate(
"rect",
xmin = 2004,
xmax = 2014,
ymin = -Inf,
ymax = Inf,
alpha = 0.2,
fill = "blue"
) +
theme_classic() +
theme(
legend.position = "bottom"
)
plotly::ggplotly()
runApp()
?renderHighchart
hcaes(x = xval, color = colorvar, group = grvar)
hchart()
hc_chart()
?hc_chart()
data(citytemp)
hc <- highchart() %>%
hc_xAxis(categories = citytemp$month) %>%
hc_add_series(name = "Tokyo", data = citytemp$tokyo) %>%
hc_add_series(name = "London", data = citytemp$london)
hc %>%
hc_chart(type = "columnn",
options3d = list(enabled = TRUE, beta = 15, alpha = 15))
hc %>%
hc_chart(borderColor = '#EBBA95',
borderRadius = 10,
borderWidth = 2,
backgroundColor = list(
linearGradient = c(0, 0, 500, 500),
stops = list(
list(0, 'rgb(255, 255, 255)'),
list(1, 'rgb(200, 200, 255)')
)))
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
