shiny::runApp()
library(tidyverse)
read_csv("data/trips_data.csv")
read_csv("data/trips_data.csv") %>%
janitor::clean_names()
d_uber <- read_csv("data/trips_data.csv") %>%
janitor::clean_names()
d_uber %>%
str()
d_uber %>%
glimpse()
d_uber %>%
count(city)
d_uber %>%
count(city) %>%
ggplot(aes(x = reorder(city, n), y = n)) +
geom_col()
?reorder
d_uber %>%
count(city) %>%
ggplot(aes(x = reorder(city, n, desc), y = n)) +
geom_col()
d_uber
d_uber %>% View()
d_uber %>%
count(city) %>%
ggplot(aes(x = reorder(city, n, desc), y = n)) +
geom_col() +
labs(
x = "City",
y = "Number"
)
d_uber
d_uber %>%
View()
d_uber %>%
filter(fare_currency=="NZD")
d_uber %>%
filter(fare_currency=="NZD")
d_uber %>%
filter(fare_currency=="NZD") %>%
View()
d_uber %>%
filter(fare_currency=="NZD")# %>%
d_uber %>%
filter(fare_currency=="NZD") %>%
View()
d_uber %>%
filter(fare_currency=="NZD") %>%
glimpse()
d_uber %>%
filter(fare_currency=="NZD") %>%
summarise(total = sum(fare_amount, na.rm = T))
d_uber <- read_csv("data/trips_data.csv") %>%
janitor::clean_names()
d_uber
library(lubridate)
d_uber %>%
mutate(request_time = as.POSIXct(request_time))
d_uber %>% glimpse()
4500/300
d_uber %>%
mutate(
request_time = as.POSIXct(request_time),
begin_trip_time = as.POSIXct(begin_trip_time),
dropoff_time = as.POSIXct(dropoff_time)
)
d_uber %>%
mutate(
request_time = as.POSIXct(request_time),
begin_trip_time = as.POSIXct(begin_trip_time),
dropoff_time = as.POSIXct(dropoff_time)
) %>%
glimpse()
d_uber %>%
mutate(
request_time = as.POSIXct(request_time),
begin_trip_time = as.POSIXct(begin_trip_time),
dropoff_time = as.POSIXct(dropoff_time),
year = year(request_time)
) %>%
glimpse()
d_uber %>%
mutate(
request_time = as.POSIXct(request_time),
begin_trip_time = as.POSIXct(begin_trip_time),
dropoff_time = as.POSIXct(dropoff_time),
year = year(request_time),
month = month(request_time),
day = day(request_time),
request_date = as.Date(request_time),
begin_trip_date = as.Date(begin_trip_date),
dropoff_date = as.Date(dropoff_time)
) %>%
glimpse()
d_uber %>%
mutate(
request_time = as.POSIXct(request_time),
begin_trip_time = as.POSIXct(begin_trip_time),
dropoff_time = as.POSIXct(dropoff_time),
year = year(request_time),
month = month(request_time),
day = day(request_time),
request_date = as.Date(request_time),
begin_trip_date = as.Date(begin_trip_time),
dropoff_date = as.Date(dropoff_time)
) %>%
glimpse()
d_uber %>%
mutate(
request_time = as.POSIXct(request_time),
begin_trip_time = as.POSIXct(begin_trip_time),
dropoff_time = as.POSIXct(dropoff_time),
year = year(request_time),
month = month(request_time),
day = day(request_time),
request_date = as.Date(request_time),
begin_trip_date = as.Date(begin_trip_time),
dropoff_date = as.Date(dropoff_time)
)
d_uber %>%
count(year) %>%
ggplot(aes(x = year, y = n)) +
geom_line()
d_clean <- d_uber %>%
mutate(
request_time = as.POSIXct(request_time),
begin_trip_time = as.POSIXct(begin_trip_time),
dropoff_time = as.POSIXct(dropoff_time),
year = year(request_time),
month = month(request_time),
day = day(request_time),
request_date = as.Date(request_time),
begin_trip_date = as.Date(begin_trip_time),
dropoff_date = as.Date(dropoff_time)
)
d_clean %>%
count(year) %>%
ggplot(aes(x = year, y = n)) +
geom_line()
d_clean %>%
count(year) %>%
ggplot(aes(x = year, y = n)) +
geom_line()
d_clean %>%
count(month) %>%
ggplot(aes(x = year, y = n)) +
geom_line()
d_clean %>%
count(month) %>%
ggplot(aes(x = month, y = n)) +
geom_line()
d_clean %>%
count(month) %>%
ggplot(aes(x = month, y = n)) +
geom_col()
?month
d_clean <- d_uber %>%
mutate(
request_time = as.POSIXct(request_time),
begin_trip_time = as.POSIXct(begin_trip_time),
dropoff_time = as.POSIXct(dropoff_time),
year = year(request_time),
month = month(request_time, label = T),
day = day(request_time),
request_date = as.Date(request_time),
begin_trip_date = as.Date(begin_trip_time),
dropoff_date = as.Date(dropoff_time)
)
d_clean %>%
count(month) %>%
ggplot(aes(x = month, y = n)) +
geom_col()
d_clean %>%
filter(year != 2019) %>%
count(month) %>%
ggplot(aes(x = month, y = n)) +
geom_col()
d_clean %>%
filter(year != 2019) %>%
glimpse()
source("utils/clean_uber_data.R")
source("utils/clean_uber_data.R")
d_uber <- read_csv("data/trips_data.csv") %>%
janitor::clean_names()
d_clean <- d_uber %>%
mutate(
request_time = as.POSIXct(request_time),
begin_trip_time = as.POSIXct(begin_trip_time),
dropoff_time = as.POSIXct(dropoff_time),
year = year(request_time),
month = month(request_time, label = T),
day = day(request_time),
request_date = as.Date(request_time),
begin_trip_date = as.Date(begin_trip_time),
dropoff_date = as.Date(dropoff_time)
)
d_clean %>%
filter(year != 2019) %>%
count(month) %>%
ggplot(aes(x = month, y = n)) +
geom_col()
library(shiny)
library(tidyverse)
library(janitor)
library(lubridate)
source("utils/clean_uber_data.R")
View(d_clean)
Sys.time()
d_uber
View(d_uber)
# Dependencies ------------------------------------------------------------
library(shiny)
runExample("08_html")
runExample("06_tabsets")
shinyApp(ui = htmlTemplate("www/index.html"), server)
# Define server logic for random distribution app ----
server <- function(input, output) {
# Reactive expression to generate the requested distribution ----
# This is called whenever the inputs change. The output functions
# defined below then use the value computed from this expression
d <- reactive({
dist <- switch(input$dist,
norm = rnorm,
unif = runif,
lnorm = rlnorm,
exp = rexp,
rnorm)
dist(input$n)
})
# Generate a plot of the data ----
# Also uses the inputs to build the plot label. Note that the
# dependencies on the inputs and the data reactive expression are
# both tracked, and all expressions are called in the sequence
# implied by the dependency graph.
output$plot <- renderPlot({
dist <- input$dist
n <- input$n
hist(d(),
main = paste("r", dist, "(", n, ")", sep = ""),
col = "#75AADB", border = "white")
})
# Generate a summary of the data ----
output$summary <- renderPrint({
summary(d())
})
# Generate an HTML table view of the head of the data ----
output$table <- renderTable({
head(data.frame(x = d()))
})
}
shinyApp(ui = htmlTemplate("www/index.html"), server)
dist(norm)
dist <- "rnorm"
n <- 1000
hist(rnorm(1000),
main = paste("r", dist, "(", n, ")", sep = ""),
col = "#75AADB", border = "white")
# Define server logic for random distribution app ----
server <- function(input, output) {
# Reactive expression to generate the requested distribution ----
# This is called whenever the inputs change. The output functions
# defined below then use the value computed from this expression
# d <- reactive({
#   dist <- switch(input$dist,
#                  norm = rnorm,
#                  unif = runif,
#                  lnorm = rlnorm,
#                  exp = rexp,
#                  rnorm)
#
#   dist(input$n)
# })
# Generate a plot of the data ----
# Also uses the inputs to build the plot label. Note that the
# dependencies on the inputs and the data reactive expression are
# both tracked, and all expressions are called in the sequence
# implied by the dependency graph.
output$plot <- renderPlot({
dist <- "rnorm"
n <- 1000
hist(rnorm(1000),
main = paste("r", dist, "(", n, ")", sep = ""),
col = "#75AADB", border = "white")
})
# Generate a summary of the data ----
# output$summary <- renderPrint({
#   summary(d())
# })
# Generate an HTML table view of the head of the data ----
# output$table <- renderTable({
#   head(data.frame(x = d()))
# })
}
shinyApp(ui = htmlTemplate("light-bootstrap-dashboard-html-v2.0.1/examples/dashboard.html"), server)
?htmlTe
?htmlTemplate
shinyApp(ui = shiny::htmlTemplate("light-bootstrap-dashboard-html-v2.0.1/examples/dashboard.html"), server)
shinyApp(ui = shiny::htmlTemplate("www/examples/dashboard.html"), server)
runApp()
runApp()
runApp()
runApp()
d_clean
d_clean -> d
d
d %>% View()
d %>% mutate(length = begin_trip_time - dropoff_time)
d %>% mutate(length = begin_trip_time - dropoff_time) %>% select(length)
d %>% mutate(length = begin_trip_time - dropoff_time) %>% select(length) %>% hist()
d %>% mutate(length = second(begin_trip_time - dropoff_time)) %>% select(length)
d %>% mutate(length = seconds(begin_trip_time - dropoff_time)) %>% select(length)
d %>% mutate(length = seconds(begin_trip_time - dropoff_time)) %>% select(length) %>% hist()
d %>% mutate(length = as.numeric(begin_trip_time - dropoff_time)) %>% select(length) %>% hist()
d %>% mutate(length = as.numeric(begin_trip_time - dropoff_time)) %>% select(length)
d %>% mutate(length = as.numeric(begin_trip_time - dropoff_time)) %>% select(length) %>% ggplot(aes(x = length))
d %>% mutate(length = as.numeric(begin_trip_time - dropoff_time)) %>% select(length) %>% ggplot(aes(x = length)) + geom_histogram()
d %>% mutate(length = as.numeric(begin_trip_time - dropoff_time)) %>% select(length) %>$ qplot()
d %>% mutate(length = as.numeric(begin_trip_time - dropoff_time)) %>% select(length) %>% qplot()
d %>% mutate(length = as.numeric(begin_trip_time - dropoff_time)) %>% pull(length) %>% hist()
d
d %>% count(city)
d %>% count(city) %>% ggplot(aes(x = city, y = n)) + geom_col()
d %>% count(city) %>% ggplot(aes(x = reorder(city,n), y = n)) + geom_col()
d %>% count(city) %>% ggplot(aes(x = reorder(city,n), y = n)) + geom_col() + labs(x="City", y="Frequency")
d %>% count(city) %>% ggplot(aes(x = reorder(city,n), y = n)) + geom_col() + labs(x="City", y="Frequency") + geom_text(aes(label = n))
d %>% count(city) %>% ggplot(aes(x = reorder(city,n), y = n)) + geom_col() + labs(x="City", y="Frequency") + geom_text(aes(label = n), vjust = 1)
d %>% count(city) %>% ggplot(aes(x = reorder(city,n), y = n)) + geom_col() + labs(x="City", y="Frequency") + geom_text(aes(label = n), vjust = -1)
runApp()
?reactive
runApp('global.R')
runApp('global.R')
runApp()
output$plot <- renderPlot({
d() %>%
count(city) %>%
ggplot(aes(x = reorder(city,n), y = n)) +
geom_col() +
labs(
x="City",
y="Frequency"
) +
geom_text(aes(label = n), vjust = -1) +
theme_minimal()
})
runApp()
runApp()
shiny::runApp()
# Define server logic for random distribution app ----
server <- function(input, output) {
#browser()
d <- reactive({
d_clean
})
output$plot <- renderPlot({
d() %>%
count(city) %>%
ggplot(aes(x = reorder(city,n), y = n)) +
geom_col() +
labs(
x="City",
y="Frequency"
) +
geom_text(aes(label = n), vjust = -1) +
theme_minimal()
})
}
shinyApp(ui = shiny::htmlTemplate("www/dashboard.html"), server)
runApp('global.R')
runApp('global.R')
runApp('global.R')
?library(shiny)
ui <- fluidPage(
)
server <- function(input, output, session) {
}
shinyApp(ui, server)
shinyApp(ui = shiny::htmlTemplate("www/dashboard.html"), server)
runApp('global.R')
runApp('global.R')
runApp('global.R')
runApp('global.R')
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
library(plotlyt)
library(plotly)
install.packages("plotly")
library(plotly)
?renderPlotly
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
install.packages("highchartr")
install.packages("highcharter")
hchart
library(highcharter)
?hchart()
?hc_chart
iris
ggplot(iris, aes(x = Sepal.Length, y = Sepal.Width, col = Species ))
ggplot(iris, aes(x = Sepal.Length, y = Sepal.Width, col = Species )) + geom_jitter()
ggplot(iris, aes(x = Sepal.Length, y = Sepal.Width, col = Species )) + geom_point()
ggplot(iris, aes(x = Sepal.Length, y = Sepal.Width, col = Species )) + geom_point()
hchart(iris, aes(x = Sepal.Length, y = Sepal.Width, col = Species ), type = "point")
hchart(iris, hcaes(x = Sepal.Length, y = Sepal.Width, col = Species ), type = "point")
hchart(iris, hcaes(x = Sepal.Length, y = Sepal.Width, group = Species ), type = "point")
runApp()
?highchart
?renderHighchart
runApp()
runApp()
ggplot(iris, aes(x = Sepal.Length, y = Sepal.Width, col = Species ), type = "point")
ggplot(iris, aes(x = Sepal.Length, y = Sepal.Width, col = Species ), type = "point")
runApp()
ggplot(iris, aes(x = Sepal.Length, y = Sepal.Width, col = Species )) +
geom_point()
ggplot(iris, aes(x = Sepal.Length, y = Sepal.Width, col = Species )) +
geom_point()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
10^-2.9
10^(-12.9)
10^(-3.7)
library(s20x)
s20x::datasets
s20x::data
