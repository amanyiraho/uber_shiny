})
output$mymap <- renderLeaflet({
leaflet() %>%
addTiles() %>%
addPolylines(
data = points()$route
)
})
}
shinyApp(ui, server)
shinyApp(ui, server)
leaflet() %>%
addTiles() %>%
addPolylines(
data = d_routes$route
)
d_routes$route
leaflet() %>%
addTiles() %>%
addPolylines(
data = d_routes$route[[1]]
)
leaflet() %>%
addTiles() %>%
addPolylines(
data = d_routes$route[[1]],
lat = ~lat,
lng = ~lon
)
leaflet() %>%
addTiles() %>%
addPolylines(
data = d_routes$route,
lat = ~lat,
lng = ~lon
)
leaflet() %>%
addPolylines(
data = d_routes$route,
lat = ~lat,
lng = ~lon
)
leaflet() %>%
addPolylines(
data = d_routes$route[1],
lat = ~lat,
lng = ~lon
)
leaflet() %>%
addPolylines(
data = d_routes$route[[1]],
lat = ~lat,
lng = ~lon
)
?leaflet
install.packages("library(leaflet.extras)
")
install.packages("leaflet.extras")
leaflet() %>%
setMapWidgetStyle(list(background= "white"))
addPolylines(
data = d_routes$route[[1]],
lat = ~lat,
lng = ~lon
)
leaflet() %>%
leaflet.extras::setMapWidgetStyle(list(background= "white"))
addPolylines(
data = d_routes$route[[1]],
lat = ~lat,
lng = ~lon
)
leaflet() %>%
leaflet.extras::setMapWidgetStyle(map = .,list(background= "white"))
addPolylines(
data = d_routes$route[[1]],
lat = ~lat,
lng = ~lon
)
leaflet() %>%
leaflet.extras::setMapWidgetStyle(map = .,list(background= "white"))
leaflet() %>%
leaflet.extras::setMapWidgetStyle(map = .,list(background= "white"))
addPolylines(
data = d_routes$route[[1]],
lat = ~lat,
lng = ~lon
)
leaflet() %>%
leaflet.extras::setMapWidgetStyle(map = .,list(background= "white")) %>%
addPolylines(
data = d_routes$route[[1]],
lat = ~lat,
lng = ~lon
)
# Base map
map <- leaflet() %>%
leaflet.extras::setMapWidgetStyle(map = .,list(background= "white"))
# Add uber trips
for (i in nrow(d_routes)) {
# Add polylines to the map
map <- map %>%
addPolylines(
data = d_routes$route[[i]],
lat = ~lat,
lng = ~lon
)
}
map
map %>% addTiles()
# Add uber trips
for (i in nrow(d_routes)) {
# Add polylines to the map
map <- map %>%
addPolylines(
data = d_routes$route[[i]],
lat = ~lat,
lng = ~lon
)
}
map
# Add polylines to the map
map <- map %>%
addPolylines(
data = d_routes$route,
lat = ~lat,
lng = ~lon
)
# Add polylines to the map
map <- map %>%
addPolylines(
data = d_routes$route[1],
lat = ~lat,
lng = ~lon
)
# Base map
map <- leaflet() %>%
leaflet.extras::setMapWidgetStyle(map = .,list(background= "white"))
# Add uber trips
for (i in nrow(d_routes)) {
# Add polylines to the map
map <- map %>%
addPolylines(
data = d_routes$route,
lat = ~lat,
lng = ~lon
)
}
# Add uber trips
for (i in nrow(d_routes)) {
# Add polylines to the map
map <- map %>%
addPolylines(
data = d_routes$route[[i]],
lat = ~lat,
lng = ~lon
)
}
map
map %>% addTiles()
d_routes
d_routes %>% unnest(route)
# Add polylines to the map
map <- map %>%
addPolylines(
data = d_routes %>% unnest(route),
lat = ~lat,
lng = ~lon
)
map
map %>% addTiles()
# Import RDS file containing route information
d_routes <- readRDS("data/uber_routes.rds") %>%
select(city, request_time, start_coord, end_coord, route) %>%
mutate(a = 1:n())
d_routes
ui <- fluidPage(
sliderInput(
"time",
"date",
min(d_routes$request_time),
max(d_routes$request_time),
value = max(d_routes$request_time),
step=1,
animate=T
),
leafletOutput("mymap")
)
server <- function(input, output, session) {
points <- reactive({
d_routes %>%
filter(city == "Auckland") %>%
filter(request_time <= input$time)
})
output$mymap <- renderLeaflet({
# Base map
map <- leaflet() %>%
# blanking bg
leaflet.extras::setMapWidgetStyle(map = .,list(background= "white")) %>%
addPolygon(
data = d_routes %>% unnest(route),
lat = ~lat,
lng = ~lon
)
})
}
shinyApp(ui, server)
library(xts)
shinyApp(ui, server)
ui <- fluidPage(
sliderInput(
"time",
"date",
min(d_routes$request_time) %>% as.Date(),
max(d_routes$request_time) %>% as.Date(),
value = max(d_routes$request_time) %>% as.Date(),
step=1*3600*24,
animate=T
),
leafletOutput("mymap")
)
server <- function(input, output, session) {
points <- reactive({
d_routes %>%
filter(city == "Auckland") %>%
filter(request_time <= input$time)
})
output$mymap <- renderLeaflet({
# Base map
map <- leaflet() %>%
# blanking bg
leaflet.extras::setMapWidgetStyle(map = .,list(background= "white")) %>%
addPolygon(
data = d_routes %>% unnest(route),
lat = ~lat,
lng = ~lon
)
})
}
shinyApp(ui, server)
shinyApp(ui, server)
library(shiny)
library(leaflet)
library(tidyverse)
library(xts)
# Import RDS file containing route information
d_routes <- readRDS("data/uber_routes.rds") %>%
select(city, request_time, start_coord, end_coord, route) %>%
mutate(a = 1:n())
d_routes
ui <- fluidPage(
sliderInput(
"time",
"date",
min(d_routes$request_time) %>% as.Date(),
max(d_routes$request_time) %>% as.Date(),
value = max(d_routes$request_time) %>% as.Date(),
step=1*3600*24,
animate=T
),
leafletOutput("mymap")
)
server <- function(input, output, session) {
points <- reactive({
d_routes %>%
filter(city == "Auckland") %>%
filter(request_time <= input$time)
})
output$mymap <- renderLeaflet({
browser()
# Base map
map <- leaflet() %>%
# blanking bg
leaflet.extras::setMapWidgetStyle(map = .,list(background= "white")) %>%
addPolygon(
data = d_routes %>% unnest(route),
lat = ~lat,
lng = ~lon
)
})
}
shinyApp(ui, server)
map <- leaflet() %>% leaflet.extras::setMapWidgetStyle(map = .,
list(background = "white")) %>% addPolygon(data = d_routes %>%
unnest(route), lat = ~lat, lng = ~lon)
ui <- fluidPage(
sliderInput(
"time",
"date",
min(d_routes$request_time) %>% as.Date(),
max(d_routes$request_time) %>% as.Date(),
value = max(d_routes$request_time) %>% as.Date(),
step=1,
animate=T
),
leafletOutput("mymap")
)
server <- function(input, output, session) {
points <- reactive({
d_routes %>%
filter(city == "Auckland") %>%
filter(request_time <= input$time)
})
output$mymap <- renderLeaflet({
browser()
# Base map
map <- leaflet() %>%
# blanking bg
leaflet.extras::setMapWidgetStyle(map = .,list(background= "white")) %>%
addPolygon(
data = points() %>% unnest(route),
lat = ~lat,
lng = ~lon
)
})
}
shinyApp(ui, server)
shinyApp(ui, server)
points()
input$time
map <- leaflet() %>%
# blanking bg
leaflet.extras::setMapWidgetStyle(map = .,list(background= "white"))
map
map <- leaflet() %>%
# blanking bg
leaflet.extras::setMapWidgetStyle(map = .,list(background= "white")) %>%
addPolygon(
data = points() %>% unnest(route),
lat = ~lat,
lng = ~lon
)
points()
points() %>% unnest(route)
leaflet() %>%
# blanking bg
leaflet.extras::setMapWidgetStyle(map = .,list(background= "white")) %>%
addPolygon(
data = points() %>% unnest(route),
lat = ~lat,
lng = ~lon
)
d_routes
d_routes %>% unnest(route)
leaflet() %>%
# blanking bg
leaflet.extras::setMapWidgetStyle(map = .,list(background= "white")) %>%
addPolygon(
data = d_routes %>% unnest(route),
lat = ~lat,
lng = ~lon
)
leaflet() %>%
# blanking bg
leaflet.extras::setMapWidgetStyle(map = .,list(background= "white")) %>%
addPolygon(
data = d_routes %>% select(-request_time) %>% unnest(route),
lat = ~lat,
lng = ~lon
)
leaflet() %>%
# blanking bg
leaflet.extras::setMapWidgetStyle(map = .,list(background= "white")) %>%
addPolylines(
data = points() %>% unnest(route),
lat = ~lat,
lng = ~lon
)
server <- function(input, output, session) {
points <- reactive({
d_routes %>%
filter(city == "Auckland") %>%
filter(request_time <= input$time)
})
output$mymap <- renderLeaflet({
browser()
# Base map
map <- leaflet() %>%
# blanking bg
leaflet.extras::setMapWidgetStyle(map = .,list(background= "white")) %>%
addPolylines(
data = points() %>% unnest(route),
lat = ~lat,
lng = ~lon
)
})
}
shinyApp(ui, server)
server <- function(input, output, session) {
points <- reactive({
d_routes %>%
filter(city == "Auckland") %>%
filter(request_time <= input$time)
})
output$mymap <- renderLeaflet({
# Base map
map <- leaflet() %>%
# blanking bg
leaflet.extras::setMapWidgetStyle(map = .,list(background= "white")) %>%
addPolylines(
data = points() %>% unnest(route),
lat = ~lat,
lng = ~lon
)
})
}
shinyApp(ui, server)
server <- function(input, output, session) {
points <- reactive({
d_routes %>%
filter(city == "Auckland") %>%
filter(request_time <= input$time)
})
output$mymap <- renderLeaflet({
# Base map
map <- leaflet() %>%
addProviderTiles(providers$CartoDB.Positron) %>%
# blanking bg
leaflet.extras::setMapWidgetStyle(map = .,list(background= "white")) %>%
addPolylines(
data = points() %>% unnest(route),
lat = ~lat,
lng = ~lon
)
})
}
# Import RDS file containing route information
d_routes <- readRDS("data/uber_routes.rds") %>%
select(city, request_time, start_coord, end_coord, route) %>%
filter(lubridate::year(request_time) > 2017) %>%
mutate(a = 1:n())
d_routes
ui <- fluidPage(
sliderInput(
"time",
"date",
min(d_routes$request_time) %>% as.Date(),
max(d_routes$request_time) %>% as.Date(),
value = max(d_routes$request_time) %>% as.Date(),
step=14,
animate=T
),
leafletOutput("mymap")
)
server <- function(input, output, session) {
points <- reactive({
d_routes %>%
filter(city == "Auckland") %>%
filter(request_time <= input$time)
})
output$mymap <- renderLeaflet({
# Base map
map <- leaflet() %>%
addProviderTiles(providers$CartoDB.Positron) %>%
# blanking bg
leaflet.extras::setMapWidgetStyle(map = .,list(background= "white")) %>%
addPolylines(
data = points() %>% unnest(route),
lat = ~lat,
lng = ~lon
)
})
}
shinyApp(ui, server)
server <- function(input, output, session) {
points <- reactive({
d_routes %>%
filter(city == "Auckland") %>%
filter(request_time <= input$time)
})
output$mymap <- renderLeaflet({
# Base map
map <- leaflet() %>%
addProviderTiles(providers$CartoDB.Positron) %>%
# blanking bg
leaflet.extras::setMapWidgetStyle(map = .,list(background= "white")) %>%
addPolylines(
data = points() %>% unnest(route),
lat = ~lat,
lng = ~lon,
weight = 1,
opacity = 1
)
})
}
shinyApp(ui, server)
shinyApp(ui, server)
?sliderInput
shiny::runApp()
runApp()
runApp()
runApp()
?sliderInput
runApp()
HTML("<p>pause</p>")
"<p>pause</p>"
runApp()
runApp()
runApp()
runApp()
runApp()
d_routes <- readRDS("data/uber_routes.rds") %>%
select(city, request_time, start_coord, end_coord, route) %>%
mutate(trip = paste("Trip", 1:n()))
d_routes
d_routes %>% filter(request_time > as_datetime("2016-01-01"))
runApp()
runApp()
points_full()
x <- points_full()
runApp()
runApp()
